// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSensor = `-- name: CreateSensor :one
INSERT INTO sensors (
    sensor_name,
    sensor_type,
    sensor_device,
    sensor_source
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, sensor_name, sensor_type, sensor_device, sensor_source, user_label, user_units, should_log
`

type CreateSensorParams struct {
	SensorName   sql.NullString
	SensorType   sql.NullString
	SensorDevice sql.NullString
	SensorSource sql.NullString
}

func (q *Queries) CreateSensor(ctx context.Context, arg CreateSensorParams) (Sensor, error) {
	row := q.db.QueryRowContext(ctx, createSensor,
		arg.SensorName,
		arg.SensorType,
		arg.SensorDevice,
		arg.SensorSource,
	)
	var i Sensor
	err := row.Scan(
		&i.ID,
		&i.SensorName,
		&i.SensorType,
		&i.SensorDevice,
		&i.SensorSource,
		&i.UserLabel,
		&i.UserUnits,
		&i.ShouldLog,
	)
	return i, err
}

const deleteSensor = `-- name: DeleteSensor :exec
DELETE FROM sensors
WHERE id = ?
`

func (q *Queries) DeleteSensor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSensor, id)
	return err
}

const getSensor = `-- name: GetSensor :one
SELECT id, sensor_name, sensor_type, sensor_device, sensor_source, user_label, user_units, should_log FROM sensors
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSensor(ctx context.Context, id int64) (Sensor, error) {
	row := q.db.QueryRowContext(ctx, getSensor, id)
	var i Sensor
	err := row.Scan(
		&i.ID,
		&i.SensorName,
		&i.SensorType,
		&i.SensorDevice,
		&i.SensorSource,
		&i.UserLabel,
		&i.UserUnits,
		&i.ShouldLog,
	)
	return i, err
}

const getSensorsBySource = `-- name: GetSensorsBySource :many
SELECT id, sensor_name, sensor_type, sensor_device, sensor_source, user_label, user_units, should_log FROM sensors
WHERE sensor_source = ?
`

func (q *Queries) GetSensorsBySource(ctx context.Context, sensorSource sql.NullString) ([]Sensor, error) {
	rows, err := q.db.QueryContext(ctx, getSensorsBySource, sensorSource)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sensor
	for rows.Next() {
		var i Sensor
		if err := rows.Scan(
			&i.ID,
			&i.SensorName,
			&i.SensorType,
			&i.SensorDevice,
			&i.SensorSource,
			&i.UserLabel,
			&i.UserUnits,
			&i.ShouldLog,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSensors = `-- name: ListSensors :many
SELECT id, sensor_name, sensor_type, sensor_device, sensor_source, user_label, user_units, should_log FROM sensors
ORDER BY sensor_name
`

func (q *Queries) ListSensors(ctx context.Context) ([]Sensor, error) {
	rows, err := q.db.QueryContext(ctx, listSensors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sensor
	for rows.Next() {
		var i Sensor
		if err := rows.Scan(
			&i.ID,
			&i.SensorName,
			&i.SensorType,
			&i.SensorDevice,
			&i.SensorSource,
			&i.UserLabel,
			&i.UserUnits,
			&i.ShouldLog,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSensor = `-- name: UpdateSensor :exec
UPDATE sensors
set user_label = ?,
    user_units = ?,
    should_log = ?
WHERE id = ?
`

type UpdateSensorParams struct {
	UserLabel sql.NullString
	UserUnits sql.NullString
	ShouldLog sql.NullInt64
	ID        int64
}

func (q *Queries) UpdateSensor(ctx context.Context, arg UpdateSensorParams) error {
	_, err := q.db.ExecContext(ctx, updateSensor,
		arg.UserLabel,
		arg.UserUnits,
		arg.ShouldLog,
		arg.ID,
	)
	return err
}
